arguments: __init__.py
--------------------
tensorflow version: 1.14.0
--------------------
git hash: b'898588ab10221890ec4a7270e74893773f694a6e'
--------------------
b'diff --git a/ml/src/freeze_graph.py b/ml/src/freeze_graph.py\nindex 961bf0a..d9f1e82 100644\n--- a/ml/src/freeze_graph.py\n+++ b/ml/src/freeze_graph.py\n@@ -35,61 +35,58 @@ import sys\n import facenet\n from six.moves import xrange  # @UnresolvedImport\n \n-class make_pb:\n-    def __init__(self, model_dir, output_file):\n-        self.model_dir = model_dir\n-        self.output_file = output_file\n-        \n-        with tf.Graph().as_default():\n-            with tf.compat.v1.Session() as sess:\n-                # Load the model metagraph and checkpoint\n-                print(\'Model directory: %s\' % self.model_dir)\n-                meta_file, ckpt_file = facenet.get_model_filenames(os.path.expanduser(self.model_dir))\n-                \n-                print(\'Metagraph file: %s\' % meta_file)\n-                print(\'Checkpoint file: %s\' % ckpt_file)\n \n-                model_dir_exp = os.path.expanduser(self.model_dir)\n-                saver = tf.compat.v1.train.import_meta_graph(os.path.join(model_dir_exp, meta_file), clear_devices=True)\n-                tf.compat.v1.get_default_session().run(tf.compat.v1.global_variables_initializer())\n-                tf.compat.v1.get_default_session().run(tf.compat.v1.local_variables_initializer())\n-                saver.restore(tf.compat.v1.get_default_session(), os.path.join(model_dir_exp, ckpt_file))\n-                \n-                # Retrieve the protobuf graph definition and fix the batch norm nodes\n-                input_graph_def = sess.graph.as_graph_def()\n-                \n-                # Freeze the graph def\n-                output_graph_def = freeze_graph_def(sess, input_graph_def, \'embeddings,label_batch\')\n+def make_pb(model_dir, output_file):\n+    with tf.Graph().as_default():\n+        with tf.Session() as sess:\n+            # Load the model metagraph and checkpoint\n+            print(\'Model directory: %s\' % model_dir)\n+            meta_file, ckpt_file = facenet.get_model_filenames(os.path.expanduser(model_dir))\n+            \n+            print(\'Metagraph file: %s\' % meta_file)\n+            print(\'Checkpoint file: %s\' % ckpt_file)\n \n-            # Serialize and dump the output graph to the filesystem\n-            with tf.io.gfile.GFile(sefl.output_file, \'wb\') as f:\n-                f.write(output_graph_def.SerializeToString())\n-            print("%d ops in the final graph: %s" % (len(output_graph_def.node), self.output_file))\n+            model_dir_exp = os.path.expanduser(model_dir)\n+            saver = tf.train.import_meta_graph(os.path.join(model_dir_exp, meta_file), clear_devices=True)\n+            tf.get_default_session().run(tf.global_variables_initializer())\n+            tf.get_default_session().run(tf.local_variables_initializer())\n+            saver.restore(tf.get_default_session(), os.path.join(model_dir_exp, ckpt_file))\n             \n-    def freeze_graph_def(sess, input_graph_def, output_node_names):\n-        for node in input_graph_def.node:\n-            if node.op == \'RefSwitch\':\n-                node.op = \'Switch\'\n-                for index in xrange(len(node.input)):\n-                    if \'moving_\' in node.input[index]:\n-                        node.input[index] = node.input[index] + \'/read\'\n-            elif node.op == \'AssignSub\':\n-                node.op = \'Sub\'\n-                if \'use_locking\' in node.attr: del node.attr[\'use_locking\']\n-            elif node.op == \'AssignAdd\':\n-                node.op = \'Add\'\n-                if \'use_locking\' in node.attr: del node.attr[\'use_locking\']\n+            # Retrieve the protobuf graph definition and fix the batch norm nodes\n+            input_graph_def = sess.graph.as_graph_def()\n+            \n+            # Freeze the graph def\n+            output_graph_def = freeze_graph_def(sess, input_graph_def, \'embeddings\')\n+\n+        # Serialize and dump the output graph to the filesystem\n+        with tf.gfile.GFile(output_file, \'wb\') as f:\n+            f.write(output_graph_def.SerializeToString())\n+        print("%d ops in the final graph: %s" % (len(output_graph_def.node), output_file))\n         \n-        # Get the list of important nodes\n-        whitelist_names = []\n-        for node in input_graph_def.node:\n-            if (node.name.startswith(\'InceptionResnet\') or node.name.startswith(\'embeddings\') or \n-                    node.name.startswith(\'image_batch\') or node.name.startswith(\'label_batch\') or\n-                    node.name.startswith(\'phase_train\') or node.name.startswith(\'Logits\')):\n-                whitelist_names.append(node.name)\n+def freeze_graph_def(sess, input_graph_def, output_node_names):\n+    for node in input_graph_def.node:\n+        if node.op == \'RefSwitch\':\n+            node.op = \'Switch\'\n+            for index in xrange(len(node.input)):\n+                if \'moving_\' in node.input[index]:\n+                    node.input[index] = node.input[index] + \'/read\'\n+        elif node.op == \'AssignSub\':\n+            node.op = \'Sub\'\n+            if \'use_locking\' in node.attr: del node.attr[\'use_locking\']\n+        elif node.op == \'AssignAdd\':\n+            node.op = \'Add\'\n+            if \'use_locking\' in node.attr: del node.attr[\'use_locking\']\n+    \n+    # Get the list of important nodes\n+    # This is the list of nodes to keep in the frozen model (do not include `is_training` here).\n+    whitelist_names = []\n+    for node in input_graph_def.node:\n+        if (node.name.startswith(\'InceptionResnetV1\') or node.name.startswith(\'embeddings\') or \n+                node.name.startswith(\'phase_train\') or node.name.startswith(\'Bottleneck\') or node.name.startswith(\'Logits\')):\n+            whitelist_names.append(node.name)\n \n-        # Replace all the variables in the graph with constants of the same values\n-        output_graph_def = graph_util.convert_variables_to_constants(\n-            sess, input_graph_def, output_node_names.split(","),\n-            variable_names_whitelist=whitelist_names)\n-        return output_graph_def\n\\ No newline at end of file\n+    # Replace all the variables in the graph with constants of the same values\n+    output_graph_def = graph_util.convert_variables_to_constants(\n+        sess, input_graph_def, output_node_names.split(","),\n+        variable_names_whitelist=whitelist_names)\n+    return output_graph_def\n\\ No newline at end of file'